{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","mainTitle","setMainTitle","useEffect","fetch","then","res","json","data","setPostList","Items","postList","title","content","postContent","setPostContent","getValue","e","target","name","value","className","type","placeholder","onChange","onClick","preventDefault","method","headers","body","JSON","stringify","response","console","log","user","map","post","i","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yOA2FeA,MAvFf,WAAgB,IAAD,EACqBC,qBADrB,mBACNC,EADM,KACKC,EADL,KAGbC,qBAAU,WACRC,MAAM,QACHC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GAAD,OAAUN,EAAaM,EAAKP,cACpCG,MAAM,cACHC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GAAD,OAAUC,EAAYD,EAAKE,YAClC,IAVU,MAYmBV,mBAAS,IAZ5B,mBAYNW,EAZM,KAYIF,EAZJ,OAcyBT,mBAAS,CAC7CY,MAAO,GACPC,QAAS,KAhBE,mBAcNC,EAdM,KAcOC,EAdP,KAoBLH,EAAmBE,EAAnBF,MAAOC,EAAYC,EAAZD,QAGTG,EAAW,SAACC,GAAO,IAAD,EACEA,EAAEC,OAAlBC,EADc,EACdA,KAAMC,EADQ,EACRA,MACdL,EAAe,2BACVD,GADS,kBAEXK,EAAOC,MAwBZ,OACE,qBAAKC,UAAU,MAAf,SACGpB,EACC,qCACE,6BAAKA,IACL,iCACE,sBAAKoB,UAAU,aAAf,UACE,0CACA,uBAAOD,MAAOR,EAAOU,KAAK,OAAOH,KAAK,QAAQI,YAAY,8CAAWC,SAAUR,OAEjF,sBAAKK,UAAU,aAAf,UACE,4CACA,uBAAOD,MAAOP,EAASS,KAAK,OAAOH,KAAK,UAAUI,YAAY,8CAAWC,SAAUR,OAErF,wBAAQM,KAAK,SAASG,QAlCpB,SAACR,GACXA,EAAES,iBACFtB,MAAM,WAAY,CAChBuB,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAU,CACnBnB,MAAOA,EACPC,QAASA,MAGVR,MAAK,SAAC2B,GAAD,OAAcA,EAASzB,UAC5BF,MAAK,SAACG,GAAD,OAAUyB,QAAQC,IAAI1B,EAAKK,QAAQsB,SAE3CpB,EAAe,2BACVD,GADS,IAEZF,MAAO,GACPC,QAAS,OAkBH,uBAIF,8BACGF,EAASyB,KAAI,SAACC,EAAMC,GACnB,OACE,oCACE,6BAAKD,EAAKzB,QACV,4BAAIyB,EAAKxB,YAFGyB,WAStB,4CCzEOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBpC,MAAK,YAAkD,IAA/CqC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.693c322f.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport axios from 'axios';\n\nfunction App() {\n  const [mainTitle, setMainTitle] = useState();\n\n  useEffect(() => {\n    fetch('/api')\n      .then((res) => res.json())\n      .then((data) => setMainTitle(data.mainTitle));\n    fetch('/api/posts')\n      .then((res) => res.json())\n      .then((data) => setPostList(data.Items));\n  }, []);\n\n  const [postList, setPostList] = useState([]);\n\n  const [postContent, setPostContent] = useState({\n    title: '',\n    content: '',\n  });\n\n  // 객체 비구조화 할당\n  const { title, content } = postContent;\n\n  // 작성되는 글의 각 요소의 밸류값을 받아오는 함수\n  const getValue = (e) => {\n    const { name, value } = e.target;\n    setPostContent({\n      ...postContent,\n      [name]: value,\n    });\n  };\n\n  const add = (e) => {\n    e.preventDefault();\n    fetch('/api/add', {\n      method: 'post',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        title: title,\n        content: content,\n      }),\n    })\n      .then((response) => response.json())\n      .then((data) => console.log(data.content.user));\n\n    setPostContent({\n      ...postContent,\n      title: '',\n      content: '',\n    });\n  };\n\n  return (\n    <div className='App'>\n      {mainTitle ? (\n        <>\n          <h1>{mainTitle}</h1>\n          <form>\n            <div className='form-group'>\n              <label>title</label>\n              <input value={title} type='text' name='title' placeholder='제목을 입력하라' onChange={getValue} />\n            </div>\n            <div className='form-group'>\n              <label>content</label>\n              <input value={content} type='text' name='content' placeholder='내용을 입력하라' onChange={getValue} />\n            </div>\n            <button type='submit' onClick={add}>\n              Submit\n            </button>\n          </form>\n          <div>\n            {postList.map((post, i) => {\n              return (\n                <article key={i}>\n                  <h3>{post.title}</h3>\n                  <p>{post.content}</p>\n                </article>\n              );\n            })}\n          </div>\n        </>\n      ) : (\n        <h1>LOADING</h1>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}